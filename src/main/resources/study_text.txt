<< 이커머스 프로젝트 >>


=============================== << 이력서 작성하기 >> ===============================
0-0. 서류 검토자가 원하는 우선순위
   1. 실제 서비스 런칭, 운영경험
   2. 기술적 역량을 잘 보여줄 수 있는 프로젝트
   3. 번뜩이는 아이디어


0-1. 팀프로젝트 관련 이력서에 작성해야 할 것
     - 유형 : 팀 프로젝트 or 개인 프로젝트 or 업무
	 - 프로젝트 진행기간 (몇일부터 몇일까지)
	 - 길지 않게 간단한 프로젝트 소개 : 2~4줄 내외 (길면 임팩트 떨어짐.)
     - 담당업무 : 팀 프로젝트에서의 역할.
	              (기술적 과제 역할. 단순 CRUD만 있는 업무는 많이 나열하지 않도록 한다. 기술적 고민에 대한 흔적이 없기 때문이다.)
	              구현한 내용 중 중요하거나 기술적으로 주요 기능만 작성.
				  (전체 기능에 대해 작성하지 않을 것. 전체 기능과 디테일한 내용은 포트폴리오에 포함할 것.)
	              ex) 회원 100%, 결제 30% 설계 및 구현
     - 사용한 기술스택 ex) Spring + JPA, Mysql DB, Docker, AWS

	 ex) 샘플
	     팀 프로젝트 - 커머스 프로젝트 (2022.01.03 ~ 2022.02.15)
	     (깃 링크)
		 소개 : 아마존에서 영감을 받아 셀러와 구매자를 가진 전통적인 커머스 사이트를 구현하였습니다.
				백엔드 두명, 프론트 두명의 개발자가 참여했습니다.
				주도적으로 설계 및 구현 진행하였고 테스트코드 또한 함께 작성했습니다. (-> 면접관이 테스트코드에 대해 질문해야겠다고 판단하는 계기가 됨.)
		 주요 담당 업무 1. 회원 (100% 구현) - Email 인증을 통한 고객/셀러의 회원 가입 및 관리 기능
											- 주문 내역 관리
					  2. 결제 (30% 구현) - 주문 실패 시 복구 기능 구현
		 사용 기술 : Spring + JPA, Mysql DB, Docker, AWS
		 - 상세 내역은 포트폴리오에 적어두었습니다.


0-2. 포트폴리오 목차
     1. 간략한 소개
     2. 주요 기능 (분류해놓은 기능과 간단한 기술적 소개)
     3. 구성도 및 ERD
     4. 시퀀스 다이어그램, 유스케이스 흐름도 같이 프로그램 로직의 흐름을 파악할 수 있는 것.
	 5. 간단한 스크린샷을 통한 설명과 코드를 기반으로 한 주요 로직 설명.
	    : 서버만 개발하는 경우 화면이 없겠지만
		  스크린샷을 통해 화면을 확인할 수 있으면 가시성이 높아지기 때문이다.





=============================== << 프로젝트 진행 전 >> ===============================
1. 주제선정
   - 무엇을 위해 만드는가
   - 타겟에 집중하고 타겟이 원하는 것 만들기
     (G마켓을 copy해 프로젝트를 수행한다고 해놓고 역경매 페이지만 만들고 G마켓에 대한 핵심 기능들이 존재하지 않는것은 의미가없다.
	  실제 해당 회사가 원하는 기술적 구현이 아무것도 없기 때문이다.)
   - 백엔드가 할일이 없는 프로젝트x
   - 알맹이가 없는 프로젝트x
     (당근마켓 정도 규모의 프로젝트를 copy해 만드는 것을 목표로 시작했으나 실제로는 한페이지만 만드는 경우가 될거라면 프로젝트를 작게 만들고 완성시키는 것이 중요하다.
      제목은 당근마켓을 모방한 중고마켓으로 해두고 실제로는 글쓰고 거래완료하는 기능만 존재한다면 안된다.
	  즉, 기술적으로 어떻게 풀어낼 수 있을지가 가장 중요하다.)


2. 팀 프로젝트 기준 프로젝트의 규모 선정
   - 1~2달을 넘기지 않는 선에서 높은 집중도로 끝낼 수 있는 분량
     (개발 기간 또한 역량을 나타낼 수 있는 척도 중의 하나이므로
      설계, 구현, 문서작성 기간을 포함해 최소 3주에서 최대 8주 정도)


3. 역할분배
   - 역할을 잘 나눌 수 있는 카테고리들의 개수가 팀원에게 분배할 수 있을 정도인지 확인.
     가장 중요한 것은 공유하는 분야와 각자 주인이 되는 부분이 공존하는 것이 베스트.
     (예를 들어 이커머스의 경우는 회원, 주문, 결제라는 큰 카테고리가 있을 수 있다.
	  회원, 주문 이라는 카테고리가 존재하고 두 파트를 연결하는 결제라는 카테고리가 존재한다.
	  팀 프로젝트에서 각각 파트만 구현하는 것은 크게 팀프로젝트를 하는 의미가 없다.
	  파트 간 연계하는 부분이 있어야 비로소 팀프로젝트를 하는 의미가 생긴다.
	  각 모듈이 개발과 연계 경험, 머지 시 pull request 날려 코드리뷰하고 수정해보는 경험 등이 팀프로젝트 수행하는 의미가 될 수 있다.)
	 (그 중 주요 서비스 구현하는게 가장 좋음)
   - 팀 프로젝트를 수행하게 되면 코드리뷰, 협업하는자세, 팀플하면서 얻을 수 있는 경험들(형상관리, 충돌해결)에 대한 이점이 있다.
   - 예를 들어 당근마켓을 clone한다고 하면 한 두달 이내에 모든 기능을 개발할 수 없다.
     따라서 선택과 집중이 필요하다.


4. 기능 단위로 계획하기
   : 주제 선정 후 혹은 주제에 충분한 개발적 과제가 있는지 고민할 때
     기능단위로 계획해보면 실질적으로 만들 수 있는 프로젝트인지 아닌지 판별하기 좋다.

   1. 브레인스토밍 ex)이커머스
      : 브레인 스토밍을 통해 필요 기능들 파악.
      주문을 하기위한 고객필요, 고객이 물건을 주문하려면 상품이 있어야한다. 그럼 상품 등록이 필요하겠네
	  상품의 품절처리를 위해 재고관리가 필요하겠고
	  해당 재고를 관리하는 셀러가 필요하겠네.
	  주문 결제를 위한 결제시스템이 필요하고 결제내역을 발송해야한다.
	  그리고 해당 결제 내역을 볼 수 있어야하기에 주문내역이 필요하다...

   2. 각 파트와 주요 기능 분류하기 (숙제 : 필요한 기능 구체화해보기 (feat.Markdown))
      : 파악한 기능들을 분류하면서 해당 기능을 구체화해봐야 한다.
	  1. 회원 : 고객(소비자), 셀러(오픈마켓 판매자), 어드민
	  2. 상품 - 상품관리 : 상품 관리를 위해 상품등록, 수정, 삭제가 가능해야한다.
	          - 재고관리
	  3. 주문 : 고객이 상품 주문, 주문내역 관리
	  4. 결제 : 순수 결제 처리

	3. 구현목록
	   - 모듈을 파트별로 각각 생성하지 않고 어느 정도 모듈을 합쳐서 진행. (모듈A=회원+주문 \ 모듈B=상품+결제)


5. 사용할 기술 및 버전
   Java 11
   Database - RDB : Mysql
			- Non-Relation DBMS : Redis
   Test - Junit5
   Build - Gradle
   Login Token - JWT
   Test UI = Swagger (PostMan, 스크래쳐? 등 사용해도 무방.)


6. 산출물
   1. 설계문서
	  - 구성도 : 실제로 서버 구성을 위해 어떤 것을 사용했는지 작성. (서버구축내용)
			   ex) 사용한 DB, 사용한 게이트웨이, AWS로 배포...
			   휴대폰 <-> UI Storage (store image) <-> Gateway <-> user-api  <-> user-db
 			    	  <-> ui (react)			   <->		   <-> order-api <-> order-db
			   - draw.io로 작성.
			     : draw.io에 여러 도형이 존재하지만 그 중 가시성이 높은 도형을 고르는 것도 중요하다.
               - 해당 서비스는 마이크로 서비스 아키텍쳐를 지향하였고...
			     이렇게 설명을 나열하는 것보다 구성도 하나로 표현하는게 훨씬 더 명확한 커뮤니케이션 수단이 될 수 있다.

			   - 작성한 draw.io 설명
			     : 현재 프로젝트인 이커머스 프로젝트는 order-api와 user-api 두 개의 서버로 이루어져있다.
				   그리고 그 앞에는 Gateway가 존재한다...

	  - DB설계문서(ERD) - Erwin, draw.io로 작성가능.
                        - 읽기가 어려워진다면 컬럼 일부를 생략해도 되지만 가능한 테이블, 테이블의 관계는 모두 명시.
						- 어떤 부분에 중점을 두고 테이블을 설계했는지도 함께 줄글로 작성해주면 더 좋음.


7. 브랜치 전략
   - 일반적으로 브랜치를 따서 머지하는 방식엔 문제점이 있다.
     (충돌이 생겼을 때)

   - Git flow
	 일반적으로 master(main) 브랜치에서 develop 브랜치를 생성하고
	 기능 개발을 위해 feature 브랜치들을 생성하게 된다.
	 기능 개발이 되면 feature 브랜치들이 develop 브랜치에 머지되고
	 release branch를 만들어서 master 브랜치에 머지한 후 배포하게 된다.
	 장애나 특이상황에서 급하게 패치가 필요해 배포가 되어야하는 경우는
	 master 브랜치에서 hotfix 브랜치를 생성해 문제를 해결해 배포한 후 hotfix 브랜치를 develop 브랜치에 머지한다.
	 이런 경우 develop과 master에 대한 순수성(?)을 유지할 수 있게된다.

   - branch name
     : 실무에서는 작업을 티켓단위로 수행하게된다.
	   이 때 작업별 브랜치명은 트래킹의 편의성을 위해 티켓번호를 사용한다.

   - Commit Message Conventions
     1. Type 작성
	    : 작업에 대한 타입 작성.
		- build, docs(문서작성), feat(기능구현), fix 또는 bug(오류수정), refactor(기능상 변경없이 코드만 수정됨), revert(이전 커밋내역 원복), style(스타일적용), test(테스트코드작성)
	- type: [branch name] 간단한 내용
	  상세내용작성(2~3줄정도)
      ex) feat: [FEAT-135] 이메일 인증 기능 구현

		  mailgun을 이용한 인증번호 발송을 통한 메일 발송 기능 구현
		  (MailSenderService)


8. Pull Request를 통한 코드리뷰 (PR 내용도 중요함.)
	- 효과적인 코드리뷰
      1. 가능한 작은 단위로 PR을 생성한다.
	  2. 충분한 정보를 제공한다.
	     : PR 요청 시 무엇을 구현했고 어떤게 바뀌었는지 간략히 작성한다.
		   의도, 변경점, 테스트 여부 및 테스트 내용, 모호한 부분이 있다면 어떤 부분에 리뷰를 집중해 주었으면 하는지 등 작성.
         ex) Mail sender service 구현
		     Mail Sender는 Mailgun을 통해 구현했습니다.
	  3. 부드럽게 토론한다.
	     : text로 이뤄지는 만큼 감정이 상하지 않게 부드러운 언어를 사용하도록 한다.
	ex) Pull Request 작성방법
	    Background
        인증에 메일 서비스를 연동하기로 하여 리서치 후 mailgun을 사용하기로 하였습니다.
        Change
	    기존 회원가입 로직에 이메일 인증을 통해 가입해야 하는 1step을 더 추가했습니다.
		Test
		이메일 발송을 통한 실 테스트 확인 완료. 테스트코드 함께 작성.
		Analatics
		성능 테스트 결과
		비용: 이메일 발송에 한건당 30원 필요.
		현재 가입 추이..
		Discuss
		ServiceA.java에서 for문 여러개로 작성하였지만 좋은 방법이라고 생각하지는 않습니다.
		혹시나 더 좋은 방법이 있다면 말씀해주시면 적극 반영해보겠습니다.





=============================== << Monolithic Architecture vs Micro service Architecture 간단히 >> ===============================
1. Monolithic Architecture
 : 단일서버 아키텍처.
   Application UI <-> Business Logic <-> DB 같은 전형적인 서비스가 집약된 형태.
 - 장점 : 한 프로젝트에 모든 기능이 포함되어있어 개발, 디버깅, 테스트, 배포가 쉬움.
		  하나의 서버 내에 모든 내용이 들어있으니 이리저리 모르는 내용에 대해 추적할 필요가 없음.
 - 단점 1. 시스템이 커질수록 복잡해짐.
		   : 기술부채 현상이라고 하는데 시스템이 커질수록 개발속도, 디버깅속도가 느려지고 결국엔 멈춰서게 될 것이다.
		2. 유동성 떨어짐.
		   : 기능 하나를 변경하려고 하는데 그 안에 딸려있는게 너무 많아서 변경이 어려움.
		3. 확장성 떨어짐.
		4. 새로운 시도에 점점 더 어려움.


2. 마이크로 서비스 아키텍쳐 (Micro service Architecture)
   비즈니스 로직은 작은 서비스 단위로 잘게 쪼개어 만드는 Micro service Architecture를 사용한다.

   - Micro service Architecture
     : 프로젝트를 진행할 때 하나의 모듈을 만들어 진행하지 않고 비지니스 로직을 쪼개 카테고리별 모듈을 각각 생성한다.
       큰 서비스가 될 수록 한개의 서비스는 모든 것을 구현하지 않는다.
	   Application UI <-> Business Logic1 <-> DB1
					  <-> Business Logic2 <-> DB2
	   하나의 DB에 접근할 수 있는 속도의 한계도 존재하기 때문에 비즈니스 로직별 DB도 별도로 둔다. (DB에 부하를 줄여줌)
	 - 장점 1. 모듈별 독립적 배포가능
	           : 예를 들어 회원 서비스만 수정했다면 해당 서버만 배포.
	        2. 이해가 쉽고 직관적
			   : 작은 서비스 단위로 이뤄지기 때문에 코드가 간결해지고 그러니까 이해하기 쉽고 직관적인 코드 작성이 가능.
			3. 더 나은 확장성
			4. 빠른 배포
			5. 부하 분산
	 - 단점 1. 시스템 관계에서 오는 복잡도
	           : C 모듈에서 API를 바꾸는 경우, 해당 API를 호출하는 다른 모듈들과의 관계도 신경써야한다.
			     이 관계들이 한 서비스에 존재하지 않기 때문에 한눈에 보기 어렵다.
	        2. 네트워크 간 성능 이슈
			   : 모듈 간 데이터를 주고받는 네트워크를 통한 이동도 작지만 분명히 비용이다.
			     이 네트워크 이동 간 문제가 발생한다면 성능 이슈가 있을 수 있다.
			3. 트랜잭션 관리
			   : 어떤 기능 처리를 위해 DB1, DB2, DB3의 데이터가 모두 변경되어야하는 경우에
			     DB3 변경 이전에 에러가 발생하면 모두 롤백해야한다.
				 만약 한 DB에서의 롤백이라면 쉽지만, 여러 DB에 걸친 이런 경우는 좀 더 어렵다.
			4. 복잡해지는 배포
			   : api endpoint가 바뀐다거나 하는 등 배포에 신경쓸점이 더 많아진다.
			5. 통합테스트 복잡
			   : 나는 C모듈 개발했는데 A,B 모듈에서 오는 use case가 다르다.
			     이 때 A,B와 연동해서 테스트하려고 하면 A,B 서버를 추가적으로 띄워야 한다.
				 mocking해서 가상의 데이터로 테스트하긴 하지만 단일 테스트보다는 훨씬 복잡해진다.





=============================== << 개발환경셋팅 >> ===============================
1. window에 Docker 설치여부 확인

	C:\Windows\System32>docker

	Usage:  docker [OPTIONS] COMMAND

	A self-sufficient runtime for containers

	Common Commands:
	  run         Create and run a new container from an image
	  exec        Execute a command in a running container
	  ps          List containers
	  build       Build an image from a Dockerfile
	  pull        Download an image from a registry
	  push        Upload an image to a registry
	  images      List images
	  login       Authenticate to a registry
	  logout      Log out from a registry
	  search      Search Docker Hub for images
	  version     Show the Docker version information
	  info        Display system-wide information

	Management Commands:
	  ai*         Ask Gordon - Docker Agent
	  builder     Manage builds
	  buildx*     Docker Buildx
	  compose*    Docker Compose
	  container   Manage containers
	  context     Manage contexts
	  debug*      Get a shell into any image or container
	  desktop*    Docker Desktop commands (Alpha)
	  dev*        Docker Dev Environments
	  extension*  Manages Docker extensions
	  feedback*   Provide feedback, right in your terminal!
	  image       Manage images
	  init*       Creates Docker-related starter files for your project
	  manifest    Manage Docker image manifests and manifest lists
	  network     Manage networks
	  plugin      Manage plugins
	  sbom*       View the packaged-based Software Bill Of Materials (SBOM) for an image
	  scout*      Docker Scout
	  system      Manage Docker
	  trust       Manage trust on Docker images
	  volume      Manage volumes

	Swarm Commands:
	  swarm       Manage Swarm

	Commands:
	  attach      Attach local standard input, output, and error streams to a running container
	  commit      Create a new image from a container's changes
	  cp          Copy files/folders between a container and the local filesystem
	  create      Create a new container
	  diff        Inspect changes to files or directories on a container's filesystem
	  events      Get real time events from the server
	  export      Export a container's filesystem as a tar archive
	  history     Show the history of an image
	  import      Import the contents from a tarball to create a filesystem image
	  inspect     Return low-level information on Docker objects
	  kill        Kill one or more running containers
	  load        Load an image from a tar archive or STDIN
	  logs        Fetch the logs of a container
	  pause       Pause all processes within one or more containers
	  port        List port mappings or a specific mapping for the container
	  rename      Rename a container
	  restart     Restart one or more containers
	  rm          Remove one or more containers
	  rmi         Remove one or more images
	  save        Save one or more images to a tar archive (streamed to STDOUT by default)
	  start       Start one or more stopped containers
	  stats       Display a live stream of container(s) resource usage statistics
	  stop        Stop one or more running containers
	  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
	  top         Display the running processes of a container
	  unpause     Unpause all processes within one or more containers
	  update      Update configuration of one or more containers
	  wait        Block until one or more containers stop, then print their exit codes

	Global Options:
		  --config string      Location of client config files (default
							   "C:\\Users\\glyce\\.docker")
	  -c, --context string     Name of the context to use to connect to the
							   daemon (overrides DOCKER_HOST env var and
							   default context set with "docker context use")
	  -D, --debug              Enable debug mode
	  -H, --host list          Daemon socket to connect to
	  -l, --log-level string   Set the logging level ("debug", "info",
							   "warn", "error", "fatal") (default "info")
		  --tls                Use TLS; implied by --tlsverify
		  --tlscacert string   Trust certs signed only by this CA (default
							   "C:\\Users\\glyce\\.docker\\ca.pem")
		  --tlscert string     Path to TLS certificate file (default
							   "C:\\Users\\glyce\\.docker\\cert.pem")
		  --tlskey string      Path to TLS key file (default
							   "C:\\Users\\glyce\\.docker\\key.pem")
		  --tlsverify          Use TLS and verify the remote
	  -v, --version            Print version information and quit

	Run 'docker COMMAND --help' for more information on a command.

	For more help on how to use Docker, head to https://docs.docker.com/go/guides/


2. 도커에서 이미지 생성 (이미지 컨테이너로 띄우기)
	- mysql (이미 Dividend 프로젝트 때 mysql 이미지를 받아놓은게 있어서 추가 다운로드 작업없음.
			 \ window에서 mysql 3306포트 사용중, Dividend 프로젝트에서 포트번호 3307사용중으로 3308 포트번호 사용.)
		C:\Windows\System32>docker run -it --name zero-base-cms-mysql -e MYSQL_ROOT_PASSWORD=1 -p 3308:3306 -d mysql
		8be28ca99483021ec4681b2676bcd2e116282abf4a751b71b88e8ed0b462729f

	- Redis
	  1. Redis GUI툴(Redis Insight) 이용 예정 (redis를 잘 모를 땐 command로 작성하는 것보다 편할 수 있음.)
	  2. redis 이미지를 받은 적 없기에 명령어 작성 시 추가 다운로드 작업 있음.
		C:\Windows\System32>docker run -it --name zero-base-cms-redis -p 6379:6379 -d redis
							Unable to find image 'redis:latest' locally
							latest: Pulling from library/redis
							8242f9d5b464: Download complete
							141f00d6fee8: Download complete
							8912a88e73c8: Download complete
							9501a6ec095f: Download complete
							75dffa679c9b: Download complete
							98e7597530ef: Download complete
							4f4fb700ef54: Download complete
							bc0965b23a04: Download complete
							Digest: sha256:ea96c435dc17b011f54c6a883c3c45e7726242b075de61c6fe40a10ae6ae0f83
							Status: Downloaded newer image for redis:latest
							75fea26ac8f96e1c09338d8e2989e2e13b02755b8dcd13d5aae852ce2578dc4a


	- docker ps -a 명령어를 통해 현재 실행중인 컨테이너 목록 확인
		C:\Windows\System32>docker ps -a
							CONTAINER ID   IMAGE           COMMAND                   CREATED         STATUS                        PORTS                               NAMES
							75fea26ac8f9   redis           "docker-entrypoint.s…"   2 minutes ago   Up 2 minutes                  0.0.0.0:6379->6379/tcp              zero-base-cms-redis
							8be28ca99483   mysql           "docker-entrypoint.s…"   2 minutes ago   Up 2 minutes                  33060/tcp, 0.0.0.0:3308->3306/tcp   zero-base-cms-mysql
							61cc9cad8ed0   ubuntu:latest   "/bin/bash"               31 hours ago    Exited (255) 35 minutes ago                                       test-ubuntu
							127c484b15c4   mysql:latest    "docker-entrypoint.s…"   42 hours ago    Exited (255) 31 hours ago     33060/tcp, 0.0.0.0:3307->3306/tcp   mysql-container


3. Email Service인 Mailgun 가입
	- 메일을 통해 인증번호를 발송하고 인증번호를 통해 회원가입을 받는 flow를 가질것이므로 가입필요.
    - mailgun 신용카드 미등록계정 하루 100건 제한.

4. springboot 프로젝트 생성
   1. spring.io를 통해 cms 프로젝트 생성

   2. cms 프로젝트 내부에 user-api 모듈을 생성
      - cms 프로젝트 안에 user-api 모듈을 넣어두긴 했지만 실제로 dependency 자체가 연동되어 있지는 않은 상태이다.
        해당 프로젝트와 모듈을 연결해주기 위해 settings.gradle 파일에 모듈 의존성을 추가한다.
        -> include 'user-api'
      - rootProject명은 내 프로젝트 폴더명이고, 정확히 확인하고 싶으면 cms 프로젝트의 settings.gradle 파일의 rootProject.name 파라미터를 확인하면 된다.

   3. 루트 프로젝트와 모듈 의존성 추가
      subprojects
      : 프로젝트 수준의 build.gradle에서 모듈 수준의 build.gradle을 제어해야하는 경우
        allprojects, subprojects, project 세가지 옵션 사용이 가능하다.
        그 중 subprojects의 경우 해당 프로젝트에 포함된 모든 모듈의 build.gradle을 제어하기 위한 것이다.
        즉, 하위의 모든 모듈들에 정의된 플러그인 및 의존성을 적용시키는 역할을 한다.

- 참고 블로그 : https://velog.io/@jthugg/spring-multi-module
           : https://wildeveloperetrain.tistory.com/251





