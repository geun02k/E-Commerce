<< 이커머스 프로젝트 >>


=============================== << 이력서 작성하기 >> ===============================
0-0. 서류 검토자가 원하는 우선순위
   1. 실제 서비스 런칭, 운영경험
   2. 기술적 역량을 잘 보여줄 수 있는 프로젝트
   3. 번뜩이는 아이디어


0-1. 팀프로젝트 관련 이력서에 작성해야 할 것
     - 유형 : 팀 프로젝트 or 개인 프로젝트 or 업무
	 - 프로젝트 진행기간 (몇일부터 몇일까지)
	 - 길지 않게 간단한 프로젝트 소개 : 2~4줄 내외 (길면 임팩트 떨어짐.)
     - 담당업무 : 팀 프로젝트에서의 역할.
	              (기술적 과제 역할. 단순 CRUD만 있는 업무는 많이 나열하지 않도록 한다. 기술적 고민에 대한 흔적이 없기 때문이다.)
	              구현한 내용 중 중요하거나 기술적으로 주요 기능만 작성.
				  (전체 기능에 대해 작성하지 않을 것. 전체 기능과 디테일한 내용은 포트폴리오에 포함할 것.)
	              ex) 회원 100%, 결제 30% 설계 및 구현
     - 사용한 기술스택 ex) Spring + JPA, Mysql DB, Docker, AWS

	 ex) 샘플
	     팀 프로젝트 - 커머스 프로젝트 (2022.01.03 ~ 2022.02.15)
	     (깃 링크)
		 소개 : 아마존에서 영감을 받아 셀러와 구매자를 가진 전통적인 커머스 사이트를 구현하였습니다.
				백엔드 두명, 프론트 두명의 개발자가 참여했습니다.
				주도적으로 설계 및 구현 진행하였고 테스트코드 또한 함께 작성했습니다. (-> 면접관이 테스트코드에 대해 질문해야겠다고 판단하는 계기가 됨.)
		 주요 담당 업무 1. 회원 (100% 구현) - Email 인증을 통한 고객/셀러의 회원 가입 및 관리 기능
											- 주문 내역 관리
					  2. 결제 (30% 구현) - 주문 실패 시 복구 기능 구현
		 사용 기술 : Spring + JPA, Mysql DB, Docker, AWS
		 - 상세 내역은 포트폴리오에 적어두었습니다.


0-2. 포트폴리오 목차
     1. 간략한 소개
     2. 주요 기능 (분류해놓은 기능과 간단한 기술적 소개)
     3. 구성도 및 ERD
     4. 시퀀스 다이어그램, 유스케이스 흐름도 같이 프로그램 로직의 흐름을 파악할 수 있는 것.
	 5. 간단한 스크린샷을 통한 설명과 코드를 기반으로 한 주요 로직 설명.
	    : 서버만 개발하는 경우 화면이 없겠지만
		  스크린샷을 통해 화면을 확인할 수 있으면 가시성이 높아지기 때문이다.





=============================== << 프로젝트 진행 전 >> ===============================
1. 주제선정
   - 무엇을 위해 만드는가
   - 타겟에 집중하고 타겟이 원하는 것 만들기
     (G마켓을 copy해 프로젝트를 수행한다고 해놓고 역경매 페이지만 만들고 G마켓에 대한 핵심 기능들이 존재하지 않는것은 의미가없다.
	  실제 해당 회사가 원하는 기술적 구현이 아무것도 없기 때문이다.)
   - 백엔드가 할일이 없는 프로젝트x
   - 알맹이가 없는 프로젝트x
     (당근마켓 정도 규모의 프로젝트를 copy해 만드는 것을 목표로 시작했으나 실제로는 한페이지만 만드는 경우가 될거라면 프로젝트를 작게 만들고 완성시키는 것이 중요하다.
      제목은 당근마켓을 모방한 중고마켓으로 해두고 실제로는 글쓰고 거래완료하는 기능만 존재한다면 안된다.
	  즉, 기술적으로 어떻게 풀어낼 수 있을지가 가장 중요하다.)


2. 팀 프로젝트 기준 프로젝트의 규모 선정
   - 1~2달을 넘기지 않는 선에서 높은 집중도로 끝낼 수 있는 분량
     (개발 기간 또한 역량을 나타낼 수 있는 척도 중의 하나이므로
      설계, 구현, 문서작성 기간을 포함해 최소 3주에서 최대 8주 정도)


3. 역할분배
   - 역할을 잘 나눌 수 있는 카테고리들의 개수가 팀원에게 분배할 수 있을 정도인지 확인.
     가장 중요한 것은 공유하는 분야와 각자 주인이 되는 부분이 공존하는 것이 베스트.
     (예를 들어 이커머스의 경우는 회원, 주문, 결제라는 큰 카테고리가 있을 수 있다.
	  회원, 주문 이라는 카테고리가 존재하고 두 파트를 연결하는 결제라는 카테고리가 존재한다.
	  팀 프로젝트에서 각각 파트만 구현하는 것은 크게 팀프로젝트를 하는 의미가 없다.
	  파트 간 연계하는 부분이 있어야 비로소 팀프로젝트를 하는 의미가 생긴다.
	  각 모듈이 개발과 연계 경험, 머지 시 pull request 날려 코드리뷰하고 수정해보는 경험 등이 팀프로젝트 수행하는 의미가 될 수 있다.)
	 (그 중 주요 서비스 구현하는게 가장 좋음)
   - 팀 프로젝트를 수행하게 되면 코드리뷰, 협업하는자세, 팀플하면서 얻을 수 있는 경험들(형상관리, 충돌해결)에 대한 이점이 있다.
   - 예를 들어 당근마켓을 clone한다고 하면 한 두달 이내에 모든 기능을 개발할 수 없다.
     따라서 선택과 집중이 필요하다.


4. 기능 단위로 계획하기
   : 주제 선정 후 혹은 주제에 충분한 개발적 과제가 있는지 고민할 때
     기능단위로 계획해보면 실질적으로 만들 수 있는 프로젝트인지 아닌지 판별하기 좋다.

   1. 브레인스토밍 ex)이커머스
      : 브레인 스토밍을 통해 필요 기능들 파악.
      주문을 하기위한 고객필요, 고객이 물건을 주문하려면 상품이 있어야한다. 그럼 상품 등록이 필요하겠네
	  상품의 품절처리를 위해 재고관리가 필요하겠고
	  해당 재고를 관리하는 셀러가 필요하겠네.
	  주문 결제를 위한 결제시스템이 필요하고 결제내역을 발송해야한다.
	  그리고 해당 결제 내역을 볼 수 있어야하기에 주문내역이 필요하다...

   2. 각 파트와 주요 기능 분류하기 (숙제 : 필요한 기능 구체화해보기 (feat.Markdown))
      : 파악한 기능들을 분류하면서 해당 기능을 구체화해봐야 한다.
	  1. 회원 : 고객(소비자), 셀러(오픈마켓 판매자), 어드민
	  2. 상품 - 상품관리 : 상품 관리를 위해 상품등록, 수정, 삭제가 가능해야한다.
	          - 재고관리
	  3. 주문 : 고객이 상품 주문, 주문내역 관리
	  4. 결제 : 순수 결제 처리

	3. 구현목록
	   - 모듈을 파트별로 각각 생성하지 않고 어느 정도 모듈을 합쳐서 진행. (모듈A=회원+주문 \ 모듈B=상품+결제)


5. 사용할 기술 및 버전
   Java 11
   Database - RDB : Mysql
			- Non-Relation DBMS : Redis
   Test - Junit5
   Build - Gradle
   Login Token - JWT
   Test UI = Swagger (PostMan, 스크래쳐? 등 사용해도 무방.)


6. 산출물
   1. 설계문서
	  - 구성도 : 실제로 서버 구성을 위해 어떤 것을 사용했는지 작성. (서버구축내용)
			   ex) 사용한 DB, 사용한 게이트웨이, AWS로 배포...
			   휴대폰 <-> UI Storage (store image) <-> Gateway <-> user-api  <-> user-db
 			    	  <-> ui (react)			   <->		   <-> order-api <-> order-db
			   - draw.io로 작성.
			     : draw.io에 여러 도형이 존재하지만 그 중 가시성이 높은 도형을 고르는 것도 중요하다.
               - 해당 서비스는 마이크로 서비스 아키텍쳐를 지향하였고...
			     이렇게 설명을 나열하는 것보다 구성도 하나로 표현하는게 훨씬 더 명확한 커뮤니케이션 수단이 될 수 있다.

			   - 작성한 draw.io 설명
			     : 현재 프로젝트인 이커머스 프로젝트는 order-api와 user-api 두 개의 서버로 이루어져있다.
				   그리고 그 앞에는 Gateway가 존재한다...

	  - DB설계문서(ERD) - Erwin, draw.io로 작성가능.
                        - 읽기가 어려워진다면 컬럼 일부를 생략해도 되지만 가능한 테이블, 테이블의 관계는 모두 명시.
						- 어떤 부분에 중점을 두고 테이블을 설계했는지도 함께 줄글로 작성해주면 더 좋음.




